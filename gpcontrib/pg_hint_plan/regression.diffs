diff -I HINT: -I CONTEXT: -I GP_IGNORE: -U3 /Users/chajas/workspace/pg_hint_plan/expected/init.out /Users/chajas/workspace/pg_hint_plan/results/init.out
--- /Users/chajas/workspace/pg_hint_plan/expected/init.out	2021-04-16 14:12:03.000000000 -0400
+++ /Users/chajas/workspace/pg_hint_plan/results/init.out	2021-04-16 14:12:03.000000000 -0400
@@ -35,10 +35,13 @@
 CREATE TABLE p2 (id int PRIMARY KEY, val text);
 CREATE INDEX p2_id_val_idx ON p2 (id, val);
 CREATE UNIQUE INDEX p2_val_idx ON p2 (val);
+DETAIL:  Distribution key column "id" is not included in the constraint.
+ERROR:  UNIQUE index must contain all columns in the table's distribution key
 CREATE INDEX p2_ununi_id_val_idx ON p2 (val);
 CREATE INDEX p2_val_idx_1 ON p2 USING hash (val);
 CREATE INDEX p2_val_id_idx ON p2 (val, id);
 CREATE INDEX p2_val_idx2 ON p2 (val COLLATE "ja_JP");
+ERROR:  collation "ja_JP" for encoding "UTF8" does not exist
 CREATE INDEX p2_val_idx3 ON p2 (val varchar_ops);
 CREATE INDEX p2_val_idx4 ON p2 (val DESC NULLS LAST);
 CREATE INDEX p2_val_idx5 ON p2 (val NULLS FIRST);
@@ -160,54 +163,72 @@
     OR name = 'client_min_messages'
  ORDER BY category, name;
 SELECT * FROM settings;
-              name              |  setting  |                    category                     
---------------------------------+-----------+-------------------------------------------------
- client_min_messages            | notice    | Client Connection Defaults / Statement Behavior
- constraint_exclusion           | partition | Query Tuning / Other Planner Options
- cpu_index_tuple_cost           | 0.005     | Query Tuning / Planner Cost Constants
- cpu_operator_cost              | 0.0025    | Query Tuning / Planner Cost Constants
- cpu_tuple_cost                 | 0.01      | Query Tuning / Planner Cost Constants
- cursor_tuple_fraction          | 0.1       | Query Tuning / Other Planner Options
- default_statistics_target      | 100       | Query Tuning / Other Planner Options
- effective_cache_size           | 16384     | Query Tuning / Planner Cost Constants
- enable_bitmapscan              | on        | Query Tuning / Planner Method Configuration
- enable_gathermerge             | on        | Query Tuning / Planner Method Configuration
- enable_hashagg                 | on        | Query Tuning / Planner Method Configuration
- enable_hashjoin                | on        | Query Tuning / Planner Method Configuration
- enable_indexonlyscan           | on        | Query Tuning / Planner Method Configuration
- enable_indexscan               | on        | Query Tuning / Planner Method Configuration
- enable_material                | on        | Query Tuning / Planner Method Configuration
- enable_mergejoin               | on        | Query Tuning / Planner Method Configuration
- enable_nestloop                | on        | Query Tuning / Planner Method Configuration
- enable_parallel_append         | on        | Query Tuning / Planner Method Configuration
- enable_parallel_hash           | on        | Query Tuning / Planner Method Configuration
- enable_partition_pruning       | on        | Query Tuning / Planner Method Configuration
- enable_partitionwise_aggregate | off       | Query Tuning / Planner Method Configuration
- enable_partitionwise_join      | off       | Query Tuning / Planner Method Configuration
- enable_seqscan                 | on        | Query Tuning / Planner Method Configuration
- enable_sort                    | on        | Query Tuning / Planner Method Configuration
- enable_tidscan                 | on        | Query Tuning / Planner Method Configuration
- force_parallel_mode            | off       | Query Tuning / Other Planner Options
- from_collapse_limit            | 8         | Query Tuning / Other Planner Options
- geqo                           | on        | Query Tuning / Genetic Query Optimizer
- geqo_effort                    | 5         | Query Tuning / Genetic Query Optimizer
- geqo_generations               | 0         | Query Tuning / Genetic Query Optimizer
- geqo_pool_size                 | 0         | Query Tuning / Genetic Query Optimizer
- geqo_seed                      | 0         | Query Tuning / Genetic Query Optimizer
- geqo_selection_bias            | 2         | Query Tuning / Genetic Query Optimizer
- geqo_threshold                 | 12        | Query Tuning / Genetic Query Optimizer
- jit                            | on        | Query Tuning / Other Planner Options
- jit_above_cost                 | 100000    | Query Tuning / Planner Cost Constants
- jit_inline_above_cost          | 500000    | Query Tuning / Planner Cost Constants
- jit_optimize_above_cost        | 500000    | Query Tuning / Planner Cost Constants
- join_collapse_limit            | 8         | Query Tuning / Other Planner Options
- min_parallel_index_scan_size   | 64        | Query Tuning / Planner Cost Constants
- min_parallel_table_scan_size   | 1024      | Query Tuning / Planner Cost Constants
- parallel_setup_cost            | 1000      | Query Tuning / Planner Cost Constants
- parallel_tuple_cost            | 0.1       | Query Tuning / Planner Cost Constants
- plan_cache_mode                | auto      | Query Tuning / Other Planner Options
- random_page_cost               | 4         | Query Tuning / Planner Cost Constants
- seq_page_cost                  | 1         | Query Tuning / Planner Cost Constants
-(46 rows)
+                         name                         |   setting   |                    category                     
+------------------------------------------------------+-------------+-------------------------------------------------
+ client_min_messages                                  | notice      | Client Connection Defaults / Statement Behavior
+ constraint_exclusion                                 | on          | Query Tuning / Other Planner Options
+ cpu_index_tuple_cost                                 | 0.005       | Query Tuning / Planner Cost Constants
+ cpu_operator_cost                                    | 0.0025      | Query Tuning / Planner Cost Constants
+ cpu_tuple_cost                                       | 0.01        | Query Tuning / Planner Cost Constants
+ cursor_tuple_fraction                                | 1           | Query Tuning / Other Planner Options
+ effective_cache_size                                 | 16384       | Query Tuning / Planner Cost Constants
+ enable_bitmapscan                                    | on          | Query Tuning / Planner Method Configuration
+ enable_gathermerge                                   | on          | Query Tuning / Planner Method Configuration
+ enable_groupagg                                      | on          | Query Tuning / Planner Method Configuration
+ enable_groupingsets_hash_disk                        | off         | Query Tuning / Planner Method Configuration
+ enable_hashagg                                       | on          | Query Tuning / Planner Method Configuration
+ enable_hashagg_disk                                  | on          | Query Tuning / Planner Method Configuration
+ enable_hashjoin                                      | on          | Query Tuning / Planner Method Configuration
+ enable_indexonlyscan                                 | on          | Query Tuning / Planner Method Configuration
+ enable_indexscan                                     | on          | Query Tuning / Planner Method Configuration
+ enable_material                                      | on          | Query Tuning / Planner Method Configuration
+ enable_mergejoin                                     | off         | Query Tuning / Planner Method Configuration
+ enable_nestloop                                      | off         | Query Tuning / Planner Method Configuration
+ enable_parallel_append                               | on          | Query Tuning / Planner Method Configuration
+ enable_parallel_hash                                 | on          | Query Tuning / Planner Method Configuration
+ enable_partition_pruning                             | on          | Query Tuning / Planner Method Configuration
+ enable_partitionwise_aggregate                       | off         | Query Tuning / Planner Method Configuration
+ enable_partitionwise_join                            | off         | Query Tuning / Planner Method Configuration
+ enable_seqscan                                       | on          | Query Tuning / Planner Method Configuration
+ enable_sort                                          | on          | Query Tuning / Planner Method Configuration
+ enable_tidscan                                       | on          | Query Tuning / Planner Method Configuration
+ force_parallel_mode                                  | off         | Query Tuning / Other Planner Options
+ from_collapse_limit                                  | 20          | Query Tuning / Other Planner Options
+ gp_adjust_selectivity_for_outerjoins                 | on          | Query Tuning / Planner Method Configuration
+ gp_dynamic_partition_pruning                         | on          | Query Tuning / Planner Method Configuration
+ gp_enable_agg_distinct                               | on          | Query Tuning / Planner Method Configuration
+ gp_enable_agg_distinct_pruning                       | on          | Query Tuning / Planner Method Configuration
+ gp_enable_direct_dispatch                            | on          | Query Tuning / Planner Method Configuration
+ gp_enable_fast_sri                                   | on          | Query Tuning / Other Planner Options
+ gp_enable_minmax_optimization                        | on          | Query Tuning / Planner Method Configuration
+ gp_enable_multiphase_agg                             | on          | Query Tuning / Planner Method Configuration
+ gp_enable_predicate_propagation                      | on          | Query Tuning / Other Planner Options
+ gp_enable_preunique                                  | on          | Query Tuning / Planner Method Configuration
+ gp_enable_relsize_collection                         | off         | Query Tuning / Planner Method Configuration
+ gp_enable_sort_distinct                              | on          | Query Tuning / Planner Method Configuration
+ gp_enable_sort_limit                                 | on          | Query Tuning / Planner Method Configuration
+ gp_motion_cost_per_row                               | 0           | Query Tuning / Planner Cost Constants
+ gp_segments_for_planner                              | 0           | Query Tuning / Planner Cost Constants
+ gp_statistics_pullup_from_child_partition            | off         | Query Tuning / Planner Method Configuration
+ gp_statistics_use_fkeys                              | off         | Query Tuning / Planner Method Configuration
+ jit                                                  | on          | Query Tuning / Other Planner Options
+ jit_above_cost                                       | 100000      | Query Tuning / Planner Cost Constants
+ jit_inline_above_cost                                | 500000      | Query Tuning / Planner Cost Constants
+ jit_optimize_above_cost                              | 500000      | Query Tuning / Planner Cost Constants
+ join_collapse_limit                                  | 20          | Query Tuning / Other Planner Options
+ min_parallel_index_scan_size                         | 16          | Query Tuning / Planner Cost Constants
+ min_parallel_table_scan_size                         | 256         | Query Tuning / Planner Cost Constants
+ optimizer                                            | off         | Query Tuning / Planner Method Configuration
+ optimizer_enable_associativity                       | off         | Query Tuning / Planner Method Configuration
+ optimizer_join_arity_for_associativity_commutativity | 18          | Query Tuning / Planner Method Configuration
+ optimizer_join_order                                 | exhaustive2 | Query Tuning / Other Planner Options
+ optimizer_join_order_threshold                       | 10          | Query Tuning / Planner Method Configuration
+ optimizer_metadata_caching                           | on          | Query Tuning / Planner Method Configuration
+ parallel_setup_cost                                  | 1000        | Query Tuning / Planner Cost Constants
+ parallel_tuple_cost                                  | 0.1         | Query Tuning / Planner Cost Constants
+ plan_cache_mode                                      | auto        | Query Tuning / Other Planner Options
+ random_page_cost                                     | 4           | Query Tuning / Planner Cost Constants
+ seq_page_cost                                        | 1           | Query Tuning / Planner Cost Constants
+(64 rows)
 
 ANALYZE;
diff -I HINT: -I CONTEXT: -I GP_IGNORE: -U3 /Users/chajas/workspace/pg_hint_plan/expected/base_plan.out /Users/chajas/workspace/pg_hint_plan/results/base_plan.out
--- /Users/chajas/workspace/pg_hint_plan/expected/base_plan.out	2021-04-16 14:12:03.000000000 -0400
+++ /Users/chajas/workspace/pg_hint_plan/results/base_plan.out	2021-04-16 14:12:03.000000000 -0400
@@ -7,20 +7,37 @@
 {
   'child' => [
     {
+      'child' => [
+        {
+          'id' => 3,
+          'parent' => 2,
+          'short' => 'Seq Scan on t1'
+        },
+        {
+          'child' => [
+            {
+              'id' => 5,
+              'parent' => 4,
+              'short' => 'Seq Scan on t2'
+            }
+          ],
+          'id' => 4,
+          'parent' => 2,
+          'short' => 'Hash'
+        }
+      ],
       'id' => 2,
       'parent' => 1,
-      'short' => 'Index Scan using t1_pkey on t1'
-    },
-    {
-      'id' => 3,
-      'parent' => 1,
-      'short' => 'Index Scan using t2_pkey on t2'
+      'short' => 'Hash Join'
     }
   ],
   'id' => 1,
-  'short' => 'Merge Join'
+  'recvsize' => 1,
+  'segments' => 3,
+  'sendsize' => 3,
+  'short' => 'Gather Motion'
 }
-GP_IGNORE:(4 rows)
+GP_IGNORE:(7 rows)
 
 -- query type 2
 EXPLAIN (COSTS false) SELECT * FROM t1, t4 WHERE t1.val < 10;
@@ -31,32 +48,52 @@
     {
       'child' => [
         {
+          'child' => [
+            {
+              'id' => 4,
+              'parent' => 3,
+              'short' => 'Bitmap Index Scan on t1_val'
+            }
+          ],
           'id' => 3,
           'parent' => 2,
-          'short' => 'Bitmap Index Scan on t1_val'
-        }
-      ],
-      'id' => 2,
-      'parent' => 1,
-      'short' => 'Bitmap Heap Scan on t1'
-    },
-    {
-      'child' => [
+          'short' => 'Bitmap Heap Scan on t1'
+        },
         {
+          'child' => [
+            {
+              'child' => [
+                {
+                  'id' => 7,
+                  'parent' => 6,
+                  'short' => 'Seq Scan on t4'
+                }
+              ],
+              'id' => 6,
+              'parent' => 5,
+              'recvsize' => 3,
+              'segments' => 3,
+              'sendsize' => 3,
+              'short' => 'Broadcast Motion'
+            }
+          ],
           'id' => 5,
-          'parent' => 4,
-          'short' => 'Seq Scan on t4'
+          'parent' => 2,
+          'short' => 'Materialize'
         }
       ],
-      'id' => 4,
+      'id' => 2,
       'parent' => 1,
-      'short' => 'Materialize'
+      'short' => 'Nested Loop'
     }
   ],
   'id' => 1,
-  'short' => 'Nested Loop'
+  'recvsize' => 1,
+  'segments' => 3,
+  'sendsize' => 3,
+  'short' => 'Gather Motion'
 }
-GP_IGNORE:(7 rows)
+GP_IGNORE:(10 rows)
 
 -- query type 3
 EXPLAIN (COSTS false) SELECT * FROM t3, t4 WHERE t3.id = t4.id AND t4.ctid = '(1,1)';
@@ -60,32 +97,44 @@
 
 -- query type 3
 EXPLAIN (COSTS false) SELECT * FROM t3, t4 WHERE t3.id = t4.id AND t4.ctid = '(1,1)';
+HINT:  To uniquely identify a row within a distributed table, use the "gp_segment_id" column together with the "ctid" column.
+NOTICE:  SELECT uses system-defined column "t4.ctid" without the necessary companion column "t4.gp_segment_id"
 QUERY PLAN
 ___________
 {
   'child' => [
     {
-      'id' => 2,
-      'parent' => 1,
-      'short' => 'Index Scan using t3_pkey on t3'
-    },
-    {
       'child' => [
         {
+          'id' => 3,
+          'parent' => 2,
+          'short' => 'Seq Scan on t3'
+        },
+        {
+          'child' => [
+            {
+              'id' => 5,
+              'parent' => 4,
+              'short' => 'Seq Scan on t4'
+            }
+          ],
           'id' => 4,
-          'parent' => 3,
-          'short' => 'Seq Scan on t4'
+          'parent' => 2,
+          'short' => 'Hash'
         }
       ],
-      'id' => 3,
+      'id' => 2,
       'parent' => 1,
-      'short' => 'Sort'
+      'short' => 'Hash Join'
     }
   ],
   'id' => 1,
-  'short' => 'Merge Join'
+  'recvsize' => 1,
+  'segments' => 3,
+  'sendsize' => 3,
+  'short' => 'Gather Motion'
 }
-GP_IGNORE:(7 rows)
+GP_IGNORE:(8 rows)
 
 -- query type 4
 EXPLAIN (COSTS false) SELECT * FROM t1, t2 WHERE t1.id = t2.id AND t1.ctid = '(1,1)';
@@ -89,25 +138,44 @@
 
 -- query type 4
 EXPLAIN (COSTS false) SELECT * FROM t1, t2 WHERE t1.id = t2.id AND t1.ctid = '(1,1)';
+HINT:  To uniquely identify a row within a distributed table, use the "gp_segment_id" column together with the "ctid" column.
+NOTICE:  SELECT uses system-defined column "t1.ctid" without the necessary companion column "t1.gp_segment_id"
 QUERY PLAN
 ___________
 {
   'child' => [
     {
+      'child' => [
+        {
+          'id' => 3,
+          'parent' => 2,
+          'short' => 'Seq Scan on t2'
+        },
+        {
+          'child' => [
+            {
+              'id' => 5,
+              'parent' => 4,
+              'short' => 'Tid Scan on t1'
+            }
+          ],
+          'id' => 4,
+          'parent' => 2,
+          'short' => 'Hash'
+        }
+      ],
       'id' => 2,
       'parent' => 1,
-      'short' => 'Tid Scan on t1'
-    },
-    {
-      'id' => 3,
-      'parent' => 1,
-      'short' => 'Index Scan using t2_pkey on t2'
+      'short' => 'Hash Join'
     }
   ],
   'id' => 1,
-  'short' => 'Nested Loop'
+  'recvsize' => 1,
+  'segments' => 3,
+  'sendsize' => 3,
+  'short' => 'Gather Motion'
 }
-GP_IGNORE:(5 rows)
+GP_IGNORE:(8 rows)
 
 -- query type 5
 EXPLAIN (COSTS false) SELECT * FROM t1, t3 WHERE t1.val = t3.val;
@@ -116,27 +184,47 @@
 {
   'child' => [
     {
-      'id' => 2,
-      'parent' => 1,
-      'short' => 'Seq Scan on t1'
-    },
-    {
       'child' => [
         {
+          'id' => 3,
+          'parent' => 2,
+          'short' => 'Seq Scan on t1'
+        },
+        {
+          'child' => [
+            {
+              'child' => [
+                {
+                  'id' => 6,
+                  'parent' => 5,
+                  'short' => 'Seq Scan on t3'
+                }
+              ],
+              'id' => 5,
+              'parent' => 4,
+              'recvsize' => 3,
+              'segments' => 3,
+              'sendsize' => 3,
+              'short' => 'Broadcast Motion'
+            }
+          ],
           'id' => 4,
-          'parent' => 3,
-          'short' => 'Seq Scan on t3'
+          'parent' => 2,
+          'short' => 'Hash'
         }
       ],
-      'id' => 3,
+      'id' => 2,
       'parent' => 1,
-      'short' => 'Hash'
+      'short' => 'Hash Join'
     }
   ],
   'id' => 1,
-  'short' => 'Hash Join'
+  'recvsize' => 1,
+  'segments' => 3,
+  'sendsize' => 3,
+  'short' => 'Gather Motion'
 }
-GP_IGNORE:(5 rows)
+GP_IGNORE:(8 rows)
 
 -- query type 6
 EXPLAIN (COSTS false) SELECT * FROM t1, t2, t3, t4 WHERE t1.id = t2.id AND t1.id = t3.id AND t1.id = t4.id;
@@ -147,47 +235,71 @@
     {
       'child' => [
         {
-          'child' => [
-            {
-              'id' => 4,
-              'parent' => 3,
-              'short' => 'Index Scan using t1_pkey on t1'
-            },
-            {
-              'id' => 5,
-              'parent' => 3,
-              'short' => 'Index Scan using t2_pkey on t2'
-            }
-          ],
           'id' => 3,
           'parent' => 2,
-          'short' => 'Merge Join'
+          'short' => 'Seq Scan on t1'
         },
         {
           'child' => [
             {
-              'id' => 7,
-              'parent' => 6,
-              'short' => 'Seq Scan on t4'
+              'child' => [
+                {
+                  'id' => 6,
+                  'parent' => 5,
+                  'short' => 'Seq Scan on t2'
+                },
+                {
+                  'child' => [
+                    {
+                      'child' => [
+                        {
+                          'id' => 9,
+                          'parent' => 8,
+                          'short' => 'Seq Scan on t3'
+                        },
+                        {
+                          'child' => [
+                            {
+                              'id' => 11,
+                              'parent' => 10,
+                              'short' => 'Seq Scan on t4'
+                            }
+                          ],
+                          'id' => 10,
+                          'parent' => 8,
+                          'short' => 'Hash'
+                        }
+                      ],
+                      'id' => 8,
+                      'parent' => 7,
+                      'short' => 'Hash Join'
+                    }
+                  ],
+                  'id' => 7,
+                  'parent' => 5,
+                  'short' => 'Hash'
+                }
+              ],
+              'id' => 5,
+              'parent' => 4,
+              'short' => 'Hash Join'
             }
           ],
-          'id' => 6,
+          'id' => 4,
           'parent' => 2,
-          'short' => 'Sort'
+          'short' => 'Hash'
         }
       ],
       'id' => 2,
       'parent' => 1,
-      'short' => 'Merge Join'
-    },
-    {
-      'id' => 8,
-      'parent' => 1,
-      'short' => 'Index Scan using t3_pkey on t3'
+      'short' => 'Hash Join'
     }
   ],
   'id' => 1,
-  'short' => 'Nested Loop'
+  'recvsize' => 1,
+  'segments' => 3,
+  'sendsize' => 3,
+  'short' => 'Gather Motion'
 }
-GP_IGNORE:(12 rows)
+GP_IGNORE:(15 rows)
 
